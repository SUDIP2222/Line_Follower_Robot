/***********************************************************************/
/*                                                                     */
/*  FILE        :SMK.cpp                                               */
/*  DATE        :Wed, Nov 19, 2014                                     */
/*  DESCRIPTION :main program file.                                    */
/*  CPU GROUP   :34C                                                   */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.19).    */
/*  NOTE:THIS IS A TYPICAL EXAMPLE.                                    */
/***********************************************************************/
#include "sfr_r834c.h"

unsigned short  ad_data[4];
void main(void);
void motor_init();
void mcu_init();
void port_init(void);
void ad_init(void);
void InitMotor(int rate);
enum{STOP,FORWARD,BACKWARD};
void Motor(int dir, int left, int right);
void motor_control();

//void ad_in(void);

void main(void)
{
	asm("FCLR I"); //disable interrupt
	
	mcu_init();
	port_init();
	ad_init();
	
	motor_init();
	InitMotor(100);
	asm ("FSET I");//enable interrupt
	//Main Loop
	while(1){
	
	//Motor(FORWARD, 40, 40);
	motor_control();
		
	//	ad_in();
		
		//you can write your sourse code here.
		//if(p2_0==0){
		p0_7=~p0_7;
		
	/*	if(p0_7==0)
		{
			p0_5=~p0_1;
			p0_6=~p0_3;
	}
	 else
	 {
		 p0_5=p0_0;
		 p0_6=p0_2;
	 } */
	 
	 if(p0_7==0)
	{
		p0_5= (ad_data[2]<0x1FF)? 0:1;
		p0_6= (ad_data[0]<0x1FF)? 0:1;
	}
	
	else{
		p0_5= (ad_data[3]<0x1FF)? 1:0;
		p0_6= (ad_data[1]<0x1FF)? 1:0;
	}
		
	}  
	
	
//}
}

void mcu_init(){
	
	prc0=1;//protection off
	cm14=0;//lowspeed on chip oscilator off
	fra2=0x00;//high speed oscilator divided by 2
	fra00=1;//high speed oscilator on
	for (int i=0;i<=255;i++)
	
	fra01=1;//select high speed oscilator
	ocd2=1;//system clock on chip oscilator clock selected
	cm16=0;//
	cm17=0;//
	cm06=0;//CM16 & CM17 enable
	prc0=0;//protection on
	
}

void port_init(void)
{
	p0=0;//LED port off
	prc2=1;//Protect off
	pd0 |=0xE0;//LED port direction
	p2=0;
	pu04=1;
	pd2=0xFE;
	
}

void ad_init()
{
	traioc=0x04;
	
	trasr=0x10;
	
	tracr=0x00;
	
	tramr=0x10;
	
	
	trapre=128-1;
	
	tra=195-1;
	
	traic=0x03;
	
	tracr=0x01;
	
	
	prc2=1;  //protect off
	pd0 &= 0xF0; //AN4/P0_0 port direction = input
	adic = 0x04; //Disable A-D conversion interrupt
	adcon0 = 0x00; //stop A/D conversion
	prc3= 1;  //Protect off
	ocvrefan = 0; // On-chip reference voltage and analog input are cut off
	prc3 = 0;  //Proction On
	admod= 0x22;  //Division Select : fAD divided by 2 
	              //  clock Source :  f1
				  //A/O operating mode : one sweep mode
				  //A/O cconversion starts by software trigger
	for(int i=0;i<10; i++);  //When the CKS2 bit is changed wait for 3 AD cycles
	                         // or more befor  starting A/D conversion
	
	adinsel = 0x30; //Analog input pin : AN4, AN5, AN6, AN7
	
	adcon1 =0x30; //EXtended analog input pin not selected
				  // 10 bit mode
	
	for(int i=0;i<10;i++);  //When the ADSTBY bit is changed from 0(A/D operation stops) to 1(A/D operation enabled), wait 1 AD cycle
	
	for (int i=0;i<4;i++)
	ad_data[i]=0;
	
}

/*void ad_in(void)
{
	adst=1;  //Conversion starts
	for(int i=0;i<10;i++); //When 1 (A/D conversion starts ) is written to the ADST bit in the  ADCONO register, an A/D 
	
	
	while(adst==1);  // A/D conversion completed
	
	ad_data[0] = ad4 & 0x03FF;  //Save A/D value
	ad_data[1] = ad5 & 0x03FF;  //Save A/D value
	ad_data[2] = ad6 & 0x03FF;  //Save A/D value
	ad_data[3] = ad7 & 0x03FF; //Save A/D value
}	*/

#pragma interrupt intTRAIC(vect=22)

   void intTRAIC(void){
	   
	   adst=1;
	   
	   
   }



		
#pragma interrupt intADIC(vect=14)


void intADIC(void){
	
	
	
		ad_data[0] = ad4 & 0x03FF;  //Save A/D value
	ad_data[1] = ad5 & 0x03FF;  //Save A/D value
	ad_data[2] = ad6 & 0x03FF;  //Save A/D value
	ad_data[3] = ad7 & 0x03FF; //Save A/D value
	
	
	
	
}



void motor_init(){
	
	pd2 |=0xFE;	
	trdpsr0=0x08;
	trdpsr1=0x01;
	trdmr=0x70;
	trdfcr=0x01;
	trdoer1=0xed;
	
	trdcr0=0x23;
	
	trdsr0=0x00;
	trdsr1=0x00;
	
	trdier0=0x00;
	trdier1=0x00;
	trd0=0;
	
	trdgra0=trdgrc0=0xFFFF;
	trdgrb0=trdgrd0=0xFFFF;
	trdgra1=trdgrc1=0xFFFF;
	
	
}




